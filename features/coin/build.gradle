apply plugin: 'com.android.feature'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion 'android-P'


    baseFeature false

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


        // progaurds
        proguardFiles getDefaultProguardFile('proguard-android.txt'),
                'proguard-rules.pro',
                '../proguards/proguard-support-v7-appcompat.pro',
                '../proguards/proguard-calligraphy-2.1.0.pro',
                '../proguards/proguard-crashlytics-2.pro',
                '../proguards/proguard-glide.pro',
                '../proguards/proguard-google-play-services.pro',
                '../proguards/proguard-rx-java.pro',
                '../proguards/proguard-square-okio.pro',
                '../proguards/proguard-square-okhttp3.pro',
                '../proguards/proguard-square-retrofit2.pro',
                '../proguards/proguard-dagger2.pro',
                '../proguards/proguard-moshi.pro'
    }

    buildTypes {
        release {
            postprocessing {
                removeUnusedCode false
                removeUnusedResources false
                obfuscate false
                optimizeCode false
            }
        }
    }

}

dependencies {


    api project(':xcore')

    implementation project(':features:appdb')

    //dagger
    implementation deps.dagger.runtime
    kapt deps.dagger.compiler
    implementation deps.dagger.android.runtime
    implementation deps.dagger.android.support
    kapt deps.dagger.android.proccesor


    implementation deps.android.arch.lifecycle.extensions
    kapt deps.android.arch.lifecycle.compiler

    implementation('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }
}
repositories {
    mavenCentral()
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
